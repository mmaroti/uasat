/**
 *	Copyright (C) Miklos Maroti, 2015
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.uasat.research;

import java.text.*;
import java.util.*;

import org.uasat.math.*;

public class HousePoset {
	private static DecimalFormat TIME_FORMAT = new DecimalFormat("0.00");

	public final Relation<Boolean> poset;
	public final List<Relation<Boolean>> crit1;

	public final List<Relation<Boolean>> crit2_gen3;
	public final List<Relation<Boolean>> crit2_op2;
	public final List<Operation<Boolean>> crit2_ops2;

	public final List<Relation<Boolean>> crit3_gen4;

	// public final List<Relation<Boolean>> crit2_op3;
	// public final List<Operation<Boolean>> crit2_ops3;

	public HousePoset() {
		poset = PartialOrder.crown(4).plus(PartialOrder.antiChain(1))
				.asRelation();

		// crit1 = findUnaryCriticals();
		crit1 = parseRels(1, "2 4", "3 4", "0 1 2", "0 1 3", "0 2 3 4",
				"1 2 3 4");

		// crit2_gen3 = findBinaryCriticals();
		crit2_gen3 = parseRels(2, "21 41 02 22 32 42 23 43 04 24 34 44",
				"21 41 22 42 03 23 33 43 04 24 34 44",
				"31 41 02 22 32 42 33 43 04 24 34 44",
				"31 41 32 42 03 23 33 43 04 24 34 44",
				"02 12 22 32 42 23 43 04 14 24 34 44",
				"02 12 22 32 42 33 43 04 14 24 34 44",
				"22 42 03 13 23 33 43 04 14 24 34 44",
				"32 42 03 13 23 33 43 04 14 24 34 44",
				"00 11 02 12 22 03 13 33 04 14 24 34 44",
				"00 20 30 40 02 12 22 32 42 03 23 33 43 04 14 24 34 44",
				"00 20 30 40 02 22 32 42 03 13 23 33 43 04 14 24 34 44",
				"11 21 31 41 02 12 22 32 42 13 23 33 43 04 14 24 34 44",
				"11 21 31 41 12 22 32 42 03 13 23 33 43 04 14 24 34 44",
				"00 20 30 40 11 21 31 41 02 12 22 32 42 03 13 23 33 43 04 14 24 34 44");

		// crit2_ops2 = findBinaryCritOp2();
		crit2_op2 = parseRels(2, "21 41 02 22 32 42 23 43 04 24 34 44",
				"21 41 22 42 03 23 33 43 04 24 34 44",
				"31 41 02 22 32 42 33 43 04 24 34 44",
				"31 41 32 42 03 23 33 43 04 24 34 44",
				"02 12 22 32 42 23 43 04 14 24 34 44",
				"02 12 22 32 42 33 43 04 14 24 34 44",
				"22 42 03 13 23 33 43 04 14 24 34 44",
				"32 42 03 13 23 33 43 04 14 24 34 44",
				"00 11 02 12 22 03 13 33 04 14 24 34 44",
				"00 20 30 40 02 12 22 32 42 03 23 33 43 04 14 24 34 44",
				"00 20 30 40 02 22 32 42 03 13 23 33 43 04 14 24 34 44",
				"11 21 31 41 02 12 22 32 42 13 23 33 43 04 14 24 34 44",
				"11 21 31 41 12 22 32 42 03 13 23 33 43 04 14 24 34 44",
				"00 20 30 40 01 11 21 31 41 02 12 22 32 42 03 13 23 33 43 04 14 24 34 44");

		crit2_ops2 = parseOps(2, "01234 11111 22244 33434 44444",
				"01234 11112 22244 33434 44444",
				"00234 11111 22244 33434 44444",
				"01234 11111 21244 33434 44444",
				"01234 11212 21244 33434 44444");

		crit3_gen4 = parseRels(
				3,
				"211 411 021 221 321 421 231 431 041 241 341 441 002 202 302 402 212 412 022 222 322 422 032 232 332 432 042 242 342 442 213 413 023 223 323 423 233 433 043 243 343 443 004 204 304 404 214 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"211 411 021 221 321 421 231 431 041 241 341 441 212 412 022 222 322 422 232 432 042 242 342 442 003 203 303 403 213 413 023 223 323 423 033 233 333 433 043 243 343 443 004 204 304 404 214 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"211 411 221 421 031 231 331 431 041 241 341 441 002 202 302 402 212 412 022 222 322 422 032 232 332 432 042 242 342 442 213 413 223 423 033 233 333 433 043 243 343 443 004 204 304 404 214 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"211 411 221 421 031 231 331 431 041 241 341 441 212 412 222 422 032 232 332 432 042 242 342 442 003 203 303 403 213 413 023 223 323 423 033 233 333 433 043 243 343 443 004 204 304 404 214 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"311 411 021 221 321 421 331 431 041 241 341 441 002 202 302 402 312 412 022 222 322 422 032 232 332 432 042 242 342 442 313 413 023 223 323 423 333 433 043 243 343 443 004 204 304 404 314 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"311 411 021 221 321 421 331 431 041 241 341 441 312 412 022 222 322 422 332 432 042 242 342 442 003 203 303 403 313 413 023 223 323 423 033 233 333 433 043 243 343 443 004 204 304 404 314 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"311 411 321 421 031 231 331 431 041 241 341 441 002 202 302 402 312 412 022 222 322 422 032 232 332 432 042 242 342 442 313 413 323 423 033 233 333 433 043 243 343 443 004 204 304 404 314 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"311 411 321 421 031 231 331 431 041 241 341 441 312 412 322 422 032 232 332 432 042 242 342 442 003 203 303 403 313 413 023 223 323 423 033 233 333 433 043 243 343 443 004 204 304 404 314 414 024 224 324 424 034 234 334 434 044 244 344 444",
				"021 121 221 321 421 231 431 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 232 332 432 042 142 242 342 442 023 123 223 323 423 233 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 231 431 041 141 241 341 441 022 122 222 322 422 232 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 331 431 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 232 332 432 042 142 242 342 442 023 123 223 323 423 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 331 431 041 141 241 341 441 022 122 222 322 422 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 233 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 041 141 241 341 441 022 122 222 322 422 232 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"021 121 221 321 421 041 141 241 341 441 022 122 222 322 422 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 203 403 123 223 323 423 233 433 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 303 403 123 223 323 423 333 433 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 233 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 202 402 122 222 322 422 232 432 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 302 402 122 222 322 422 332 432 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 022 122 222 322 422 232 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"121 221 321 421 141 241 341 441 022 122 222 322 422 332 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"221 421 031 131 231 331 431 041 141 241 341 441 002 202 302 402 022 222 322 422 032 132 232 332 432 042 142 242 342 442 223 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"221 421 031 131 231 331 431 041 141 241 341 441 222 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"321 421 031 131 231 331 431 041 141 241 341 441 002 202 302 402 022 222 322 422 032 132 232 332 432 042 142 242 342 442 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"321 421 031 131 231 331 431 041 141 241 341 441 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"031 131 231 331 431 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 223 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"031 131 231 331 431 041 141 241 341 441 002 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"031 131 231 331 431 041 141 241 341 441 222 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"031 131 231 331 431 041 141 241 341 441 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 203 403 223 423 133 233 333 433 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 303 403 323 423 133 233 333 433 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 223 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 202 402 222 422 132 232 332 432 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 302 402 322 422 132 232 332 432 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 222 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"131 231 331 431 141 241 341 441 322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 213 413 023 223 323 423 233 433 043 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 213 413 223 423 033 233 333 433 043 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 313 413 023 223 323 423 333 433 043 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 313 413 323 423 033 233 333 433 043 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 233 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 023 123 223 323 423 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 223 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"212 412 022 222 322 422 232 432 042 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"212 412 222 422 032 232 332 432 042 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"312 412 022 222 322 422 332 432 042 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"312 412 322 422 032 232 332 432 042 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"022 122 222 322 422 232 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"022 122 222 322 422 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"222 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 121 221 321 421 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 121 221 321 421 141 241 341 441 002 202 302 402 022 122 222 322 422 032 232 332 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 131 231 331 431 141 241 341 441 002 102 202 302 402 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 131 231 331 431 141 241 341 441 002 202 302 402 022 222 322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 021 121 221 321 421 131 231 331 431 041 141 241 341 441 002 202 302 402 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 113 213 313 413 023 123 223 323 423 133 233 333 433 043 143 243 343 443 004 204 304 404 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 021 121 221 321 421 131 231 331 431 041 141 241 341 441 112 212 312 412 022 122 222 322 422 132 232 332 432 042 142 242 342 442 003 203 303 403 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 031 131 231 331 431 041 141 241 341 441 002 202 302 402 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 113 213 313 413 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 031 131 231 331 431 041 141 241 341 441 112 212 312 412 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 204 304 404 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 123 223 323 423 033 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 023 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 002 202 302 402 022 122 222 322 422 032 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 002 202 302 402 022 222 322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 113 213 313 413 023 123 223 323 423 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 113 213 313 413 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 112 212 312 412 022 122 222 322 422 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 112 212 312 412 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 002 102 202 302 402 012 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 203 303 403 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444",
				"000 200 300 400 020 220 320 420 030 230 330 430 040 240 340 440 111 211 311 411 121 221 321 421 131 231 331 431 141 241 341 441 002 202 302 402 112 212 312 412 022 122 222 322 422 032 132 232 332 432 042 142 242 342 442 003 103 203 303 403 013 113 213 313 413 023 123 223 323 423 033 133 233 333 433 043 143 243 343 443 004 104 204 304 404 014 114 214 314 414 024 124 224 324 424 034 134 234 334 434 044 144 244 344 444");
	}

	public List<Relation<Boolean>> parseRels(int arity, String... rels) {
		List<Relation<Boolean>> list = new ArrayList<Relation<Boolean>>();
		for (String rel : rels)
			list.add(Relation.parse(poset.getSize(), arity, rel));
		return list;
	}

	public List<Operation<Boolean>> parseOps(int arity, String... ops) {
		List<Operation<Boolean>> list = new ArrayList<Operation<Boolean>>();
		for (String op : ops)
			list.add(Operation.parse(poset.getSize(), arity, op));
		return list;
	}

	public List<Relation<Boolean>> findUnaryCriticals() {
		CriticalRelsGen gen = new CriticalRelsGen(poset.getSize(), 1, 2);

		gen.addGenerator(poset);
		gen.addSingletons();
		gen.generate1();
		gen.printUniCriticals1();

		return gen.getUniCriticals1();
	}

	public List<Relation<Boolean>> findBinaryCriticals() {
		CriticalRelsGen gen = new CriticalRelsGen(poset.getSize(), 2, 3);

		gen.addGenerator(poset);
		gen.addGenerators(crit1);
		gen.generate2();
		gen.printUniCriticals1();
		// gen.printStats();

		return gen.getUniCriticals1();
	}

	public List<Relation<Boolean>> findBinaryCritOp2() {
		ClonePair clone = new ClonePair(poset.getSize());
		// clone.trace = true;
		clone.addRelation(poset);
		clone.addSingletons();
		clone.addCriticalOps(2, 2);
		clone.print();

		CompatibleRels comp = new CompatibleRels(clone.getAlgebra());
		List<Relation<Boolean>> rels = comp.findUniCriticalRels(2);
		Relation.print("crit2 op2", rels);

		return rels;
	}

	public List<Relation<Boolean>> findBinaryCritOp3() {
		ClonePair clone = new ClonePair(poset.getSize());
		clone.addRelation(poset);
		clone.addSingletons();
		clone.addCriticalOps(2, 2);
		clone.addCriticalOps(3, 2);
		clone.print();

		CompatibleRels comp = new CompatibleRels(clone.getAlgebra());
		List<Relation<Boolean>> rels = comp.findUniCriticalRels(2);
		Relation.print("crit2 op3", rels);

		return rels;
	}

	public List<Relation<Boolean>> findTernaryCriticals() {
		CriticalRelsGen gen = new CriticalRelsGen(poset.getSize(), 3, 4);
		gen.trace = true;

		gen.addGenerators(crit1);
		gen.addGenerators(crit2_gen3);
		gen.generate2();
		gen.printUniCriticals1();

		return gen.getUniCriticals1();
	}

	public List<Relation<Boolean>> findTernaryCritOp2() {
		ClonePair clone = new ClonePair(poset.getSize());
		clone.trace = true;
		clone.addRelation(poset);
		clone.addSingletons();
		clone.addCriticalOps(2, 2);
		clone.print();
		// clone.addCriticalOps(2, 3);
		// clone.print();

		CriticalRelsComp comp = new CriticalRelsComp(poset.getSize(), 3);
		comp.trace = true;
		comp.addRelations(crit1);
		comp.addRelations(crit2_gen3);
		comp.addRelations(crit3_gen4);
		comp.addOperations(clone.getAlgebra());
		comp.generate();
		List<Relation<Boolean>> rels = comp.getUniCriticals();
		Relation.print("crit3 op2", rels);

		return rels;
	}

	public List<Relation<Boolean>> findTernaryCritOp3() {
		ClonePair clone = new ClonePair(poset.getSize());
		clone.addRelation(poset);
		clone.addSingletons();
		clone.addOperations(crit2_ops2);
		clone.addCriticalOps(2, 2);
		clone.addCriticalOps(3, 2);
		clone.print();
		clone.trace = true;
		clone.addCriticalOps(3, 3);
		clone.print();

		CriticalRelsComp comp = new CriticalRelsComp(poset.getSize(), 3);
		comp.trace = true;
		comp.addRelations(crit1);
		comp.addRelations(crit2_gen3);
		comp.addRelations(crit3_gen4);
		comp.addOperations(clone.getAlgebra());
		comp.generate();
		List<Relation<Boolean>> rels = comp.getUniCriticals();
		Relation.print("crit3 op3", rels);

		return rels;
	}

	public List<Relation<Boolean>> findTernaryCritOp4() {
		ClonePair clone = new ClonePair(poset.getSize());
		clone.addRelation(poset);
		clone.addSingletons();
		clone.addCriticalOps(4, 3);
		clone.print();

		CompatibleRels comp = new CompatibleRels(clone.getAlgebra());
		List<Relation<Boolean>> rels = comp.findUniCriticalRels(2);
		Relation.print("crit3 op4", rels);

		return rels;
	}

	public void explain(Relation<Boolean> rel, int arity) {
		assert rel.getArity() <= arity && 2 <= arity;

		CriticalRelsGen gen = new CriticalRelsGen(poset.getSize(),
				rel.getArity(), arity);
		gen.addGenerator(poset);
		gen.addGenerators(crit1);
		gen.printRepresentation(rel);
		gen.printStats();
	}

	public static void main(String[] args) {
		long time = System.currentTimeMillis();

		HousePoset h = new HousePoset();
		// h.findBinaryCriticals();
		// h.findBinaryCritOp2();
		// h.findTernaryCriticals();
		h.findTernaryCritOp3();
		// h.explain(h.crit2_gen3.get(13), 3);

		time = System.currentTimeMillis() - time;
		System.out.println("Finished in " + TIME_FORMAT.format(0.001 * time)
				+ " seconds.");
	}
}
